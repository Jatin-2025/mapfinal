<launch>
		<!-- Load robot description and start state publisher-->
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find mapp_bot_pkg)/urdf/head_2d.urdf" />
    <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find mapp_bot_pkg)/rviz/localization.rviz"/> -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" output="screen"/>
    <node pkg="rviz" type="rviz" name="show_rviz" args="-d $(find mapp_bot_pkg)/rviz/new_bot.rviz"/> 
    <!-- <node pkg="rviz" type="rviz" name="rviz"/>  -->
    <!-- <node pkg="rviz" type="rviz" name="show_rviz" args="-d $(find mapp_bot_pkg)/rviz/actualmap.rviz"/>  -->

    <!-- <rosparam file="$(find mapp_bot_pkg)/rviz/controllers.yaml" command="load"/>
    <rosparam file="$(find mapp_bot_pkg)/rviz/joint_limits.yaml" command="load"/> -->

		<!-- Start RPLIDAR sensor node which provides LaserScan data  -->
    <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
     <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
     <param name="serial_baudrate"     type="int"    value="256000"/>
     <param name="frame_id"            type="string" value="laser"/>
     <param name="inverted"            type="bool"   value="false"/>
     <param name="angle_compensate"    type="bool"   value="true"/>
     <param name="scan_frequency" type="double" value="16"/>

    </node>
		
      <!-- <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"
        args="
            /mobile_robot/joints_update
            /mobile_robot/mobile_base_controller" >
      </node>
       -->
		<!-- Start Google Cartographer node with custom configuration file-->
    <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="
          -configuration_directory
              $(find mapp_bot_pkg)/configuration_files
          -configuration_basename gbot_lidar_2d.lua" output="screen">
          
    </node>

    

		<!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" />

    <!-- <node name="telop" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py"> -->
		<!--<remap from="/cmd_vel" to="/mobile_robot/mobile_base_controller/cmd_vel"/> -->
    <!-- </node> -->
    
</launch>
